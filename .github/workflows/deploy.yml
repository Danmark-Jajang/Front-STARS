
name: Frontend Upload ECR

on:
  workflow_dispatch:
    inputs:
      environment:
        description: '수동 배포'
        required: true
        default: 'all'
        type: choice
        options:
          - all

jobs:
  setup-infra:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.environment == 'all' }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: node.js 설치
        uses: actions/setup-node@v2
        with:
          node-version: 22

      - name: Create .env from secret
        run: echo "${{ secrets.ARGO_GIT_REPO }}" > .env

      - name: node.js 테스트
        run:  npm install
      
      # run: npm run build
      - name: 빌드
        run: npm run build

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: frontend
          IMAGE_TAG: ${{ github.run_number }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Set up kubeconfig
        run: aws eks update-kubeconfig --region   ap-northeast-2 --name one-cluster

      - name: Deploy to EKS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: frontend
          IMAGE_TAG: ${{ github.run_number }}
        run: |
          kubectl set image deployment/frontend frontend=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          kubectl rollout status deployment/frontend